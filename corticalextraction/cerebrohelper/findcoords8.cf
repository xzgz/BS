/* Copyright 1995-2011 Roger P. Woods, M.D. */
/* Modified 3/13/11 */


/* findcoords8.cf
 *
 * This code fragment finds the coordinates x_i, y_i, and t_i
 * and computes related first and second derivatives
 *
 * It is meant to be included by other .c files such as uvderivsN8.c	
 */


			{
				/*Calculate coordinates (i,j,k) of pixel r in standard file*/
				unsigned int i,j,k;
				{
					unsigned long int tempplane=x_dim2*y_dim2;
					unsigned long int tempremainder=r%tempplane;

					k=(unsigned int)(r/tempplane);
					j=(unsigned int)tempremainder/x_dim2;
					i=(unsigned int)tempremainder%x_dim2;
				}
					
				/*Calculate coordinates (x_i,y_i) of corresponding pixel in reslice file*/
				/*Skip further computations if pixel is out of bounds*/
				{
					double x_i, y_i, t_i;
					
					t_i=i*e03+j*e13+1.0;

					x_i=(i*e00+j*e10+e30)/t_i;
					if (x_i<0 || x_i>x_max1) continue;


					y_i=(i*e01+j*e11+e31)/t_i;
					if (y_i<0 || y_i>y_max1) continue;

					
					/* Compute non-zero first derivatives */
					
					{
						double inv_t_i=1.0/t_i;
						
						{
							/*
							 * Note that dx[0], dx[1], dx[2]
							 * are equal to dy[3], dy[4], dy[5], respectively
							 *
							 * Consequently, these are all treated as
							 * dxy[0], dxy[1], and dxy[2]
							 *
							 */
							 
							double *dxyptr=dxy;
							
							*dxyptr++=(double)i*inv_t_i;
							*dxyptr++=(double)j*inv_t_i;
							*dxyptr=inv_t_i;
						}
						{
							/*
							 * dx indexing starts with dx[6]
							 * dy indexing starts with dy[6]
							 */
							 
							double *dxptr=dx;
							double *dyptr=dy;
							
							{
								double temp=-(double)i*inv_t_i;
								
								*dxptr++=x_i*temp;
								*dyptr++=y_i*temp;
							}
							{
								double temp=-(double)j*inv_t_i;
								
								*dxptr=x_i*temp;    /* Final reference to dxptr */
								*dyptr=y_i*temp;    /* Final reference to dyptr */
							}
						}
					}
					
					/* Compute non-zero second derivatives */
					
					{
						double inv_t_isq=1.0/(t_i*t_i);
						
						/* 
						 * Note that ex[6][0]...ex[6][2]
						 * equals ey[6][3]...ey[6][5], respectively
						 *
						 * Consequently, these are all referred to as
						 * exy[0]...exy[2]
						 *
						 * Similarly, ex[7][0]...ex[7][2]
						 * equals ey[7][3]...ey[7][5], respectively
						 * 
						 * Consequently, these are all referred to as
						 * exy[3]...exy[5]
						 */
						 
						 /*
						  * ex actually contains, in sequence:
						  * ex[6][6],ex[7][6],ex[7][7]
						  * stored in ex[0],ex[1],ex[2]
						  *
						  * ey actually contains, in sequence:
						  * ey[6][6],ey[7][6],ey[7][7]
						  * stored in ey[0],ey[1],ey[2]
						  */
						 
						double *exyptr=exyitems;
						double *exptr=exitems;
						double *eyptr=eyitems;
						
						/* exptr=ex[6] */
						{
							double temp=inv_t_isq*i;
							
							*exyptr++=-(double)i*temp;
							*exyptr++=-(double)j*temp;
							*exyptr++=-temp;
						}
						{
							{
								double temp=2.0*i*i*inv_t_isq;
								
								*exptr++=x_i*temp;
								*eyptr++=y_i*temp;
							}
						}
						
						/* exptr=ex[7] */
						{
							double temp=inv_t_isq*j;
							
							*exyptr++=-(double)i*temp;
							*exyptr++=-(double)j*temp;
							*exyptr=-temp;              /* Final reference to exyptr */
						}
						{
							{
								double temp=2.0*i*j*inv_t_isq;
								
								*exptr++=x_i*temp;
								*eyptr++=y_i*temp;
							}
							{
								double temp=2.0*j*j*inv_t_isq;
								
								*exptr=x_i*temp;        /* Final reference to exptr */
								*eyptr=y_i*temp;        /* Final reference to eyptr */
							}
						}
					}


					/*Get the coordinates of the 8 voxels surrounding the designated pixel*/
					/* in the reslice file*/
					{
						unsigned int x_up=x_i;
						unsigned int y_up=y_i;
						
						unsigned int x_down=x_up++;
						unsigned int y_down=y_up++;
						
						if(x_up>x_max1u){
							x_up--;
							x_down--;
						}

						a=x_i-x_down;
						d=x_up-x_i;
						
						if(y_up>y_max1u){
							y_up--;
							y_down--;
						}
						
						b=y_i-y_down;
						e=y_up-y_i;

						/*Get the values of these 4 voxels*/

						n0=(int)pixel2[k][y_down][x_down];
						n1=(int)pixel2[k][y_down][x_up];
						n2=(int)pixel2[k][y_up][x_down];
						n3=(int)pixel2[k][y_up][x_up];
					}
				}
			}
