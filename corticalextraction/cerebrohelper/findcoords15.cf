/* Copyright 1995-2011 Roger P. Woods, M.D. */
/* Modified 3/13/11 */


/* findcoords15.cf
 *
 * This code fragment finds the coordinates x_i, y_i, z_i and t_i
 * and computes related first and second derivatives
 *
 * It is meant to be included by other .c files such as uvderivsN15.c	
 */


			{
				/*Calculate coordinates (i,j,k) of pixel r in standard file*/
				unsigned int i,j,k;
				{
					unsigned long int tempplane=x_dim2*y_dim2;
					unsigned long int tempremainder=r%tempplane;

					k=(unsigned int)(r/tempplane);
					j=(unsigned int)tempremainder/x_dim2;
					i=(unsigned int)tempremainder%x_dim2;
				}
					
				/*Calculate coordinates (x_i,y_i,z_i) of corresponding pixel in reslice file*/
				/*Skip further computations if pixel is out of bounds*/
				{
					double x_i, y_i, z_i, t_i;
					
					t_i=i*e03+j*e13+k*e23+1.0;

					x_i=(i*e00+j*e10+k*e20+e30)/t_i;
					if (x_i<0 || x_i>x_max1) continue;


					y_i=(i*e01+j*e11+k*e21+e31)/t_i;
					if (y_i<0 || y_i>y_max1) continue;


					z_i=(i*e02+j*e12+k*e22+e32)/t_i;
					if (z_i<0 || z_i>z_max1) continue;
					
					/* Compute non-zero first derivatives */
					
					{
						double inv_t_i=1.0/t_i;
						
						{
							/*
							 * Note that dx[0], dx[1], dx[2], dx[3]
							 * are equal to dy[4], dy[5], dy[6], dy[7]
							 * and to dz[8], dz[9], dz[10], dz[11], respectively
							 *
							 * Consequently, these are all treated as
							 * dxyz[0], dxyz[1], dxyz[2], and dxyz[3]
							 *
							 */
							 
							double *dxyzptr=dxyz;
							
							*dxyzptr++=(double)i*inv_t_i;
							*dxyzptr++=(double)j*inv_t_i;
							*dxyzptr++=(double)k*inv_t_i;
							*dxyzptr=inv_t_i;
						}
						{
							/*
							 * dx indexing starts with dx[12]
							 * dy indexing starts with dy[12]
							 * dz indexing starts with dz[12]
							 */
							 
							double *dxptr=dx;
							double *dyptr=dy;
							double *dzptr=dz;
							
							{
								double temp=-(double)i*inv_t_i;
								
								*dxptr++=x_i*temp;
								*dyptr++=y_i*temp;
								*dzptr++=z_i*temp;
							}
							{
								double temp=-(double)j*inv_t_i;
								
								*dxptr++=x_i*temp;
								*dyptr++=y_i*temp;
								*dzptr++=z_i*temp;
							}
							{
								double temp=-(double)k*inv_t_i;
								
								*dxptr=x_i*temp;
								*dyptr=y_i*temp;
								*dzptr=z_i*temp;
							}
						}
					}
					
					/* Compute non-zero second derivatives */
					
					{
						double inv_t_isq=1.0/(t_i*t_i);
						
						/* 
						 * Note that ex[12][0]...ex[12][3]
						 * equals ey[12][4]...ey[12][7]
						 * and ez[12][8]...ez[12][11], respectively
						 *
						 * Consequently, these are all referred to as
						 * exyz[0]...exyz[3]
						 *
						 * Similarly, ex[13][0]...ex[13][3]
						 * equals ey[13][4]...ey[13][7] 
						 * and ez[13][8]...ez[13][11], respectively
						 * 
						 * Consequently, these are all referred to as
						 * exyz[4]...exyz[7]
						 *
						 * Finally, ex[14][0]...ex[14][3]
						 * equals ey[14][4]...ey[14][7]
						 * and ez[14][8]...ez[14][11], respectively
						 *
						 * Consequently, these are all referred to as
						 * exyz[8]...exyz[11]
						 */
						 
						 /*
						  * ex actually contains, in sequence:
						  * ex[12][12],ex[13][12],ex[13][13],ex[14][12],ex[14][13],ex[14][14]
						  * stored in ex[0],ex[1],ex[2],ex[3],ex[4],ex[5]
						  *
						  * ey actually contains, in sequence:
						  * ey[12][12],ey[13][12],ey[13][13],ey[14][12],ey[14][13],ex[14][14]
						  * stored in ey[0],ey[1],ey[2],ey[3],ey[4],ey[5]
						  *
						  * ex actually contains, in sequence:
						  * ez[12][12],ez[13][12],ez[13][13],ez[14][12],ez[14][13],ez[14][14]
						  * stored in ez[0],ez[1],ez[2],ez[3],ez[4],ez[5]
						  */
						 
						double *exyzptr=exyzitems;
						double *exptr=exitems;
						double *eyptr=eyitems;
						double *ezptr=ezitems;
						
						/* exptr=ex[12] */
						{
							double temp=inv_t_isq*i;
							
							*exyzptr++=-(double)i*temp;
							*exyzptr++=-(double)j*temp;
							*exyzptr++=-(double)k*temp;
							*exyzptr++=-temp;
						}
						{
							{
								double temp=2.0*i*i*inv_t_isq;
								
								*exptr++=x_i*temp;
								*eyptr++=y_i*temp;
								*ezptr++=z_i*temp;
							}
						}
						
						/* exptr=ex[13] */
						{
							double temp=inv_t_isq*j;
							
							*exyzptr++=-(double)i*temp;
							*exyzptr++=-(double)j*temp;
							*exyzptr++=-(double)k*temp;
							*exyzptr++=-temp;
						}
						{
							{
								double temp=2.0*i*j*inv_t_isq;
								
								*exptr++=x_i*temp;
								*eyptr++=y_i*temp;
								*ezptr++=z_i*temp;
							}
							{
								double temp=2.0*j*j*inv_t_isq;
								
								*exptr++=x_i*temp;
								*eyptr++=y_i*temp;
								*ezptr++=z_i*temp;
							}
						}
						/* exptr=ex[14] */
						{
							double temp=inv_t_isq*k;
							
							*exyzptr++=-(double)i*temp;
							*exyzptr++=-(double)j*temp;
							*exyzptr++=-(double)k*temp;
							*exyzptr=-temp;
						}
						{
							{
								double temp=2.0*i*k*inv_t_isq;
								*exptr++=x_i*temp;
								*eyptr++=y_i*temp;
								*ezptr++=z_i*temp;
							}
							{
								double temp=2.0*j*k*inv_t_isq;
								*exptr++=x_i*temp;
								*eyptr++=y_i*temp;
								*ezptr++=z_i*temp;
							}
							{
								double temp=2.0*k*k*inv_t_isq;
								*exptr=x_i*temp;
								*eyptr=y_i*temp;
								*ezptr=z_i*temp;
							}
						}
					}


					/*Get the coordinates of the 8 voxels surrounding the designated pixel*/
					/* in the reslice file*/
					{
						unsigned int x_up=x_i;
						unsigned int y_up=y_i;
						unsigned int z_up=z_i;
						
						unsigned int x_down=x_up++;
						unsigned int y_down=y_up++;
						unsigned int z_down=z_up++;
						
						if(x_up>x_max1u){
							x_up--;
							x_down--;
						}

						a=x_i-x_down;
						d=x_up-x_i;
						
						if(y_up>y_max1u){
							y_up--;
							y_down--;
						}
						
						b=y_i-y_down;
						e=y_up-y_i;
						
						if(z_up>z_max1u){
							z_up--;
							z_down--;
						}

						c=z_i-z_down;
						f=z_up-z_i;


						/*Get the values of these 8 voxels*/

						n0=(int)pixel2[z_down][y_down][x_down];
						n1=(int)pixel2[z_down][y_down][x_up];
						n2=(int)pixel2[z_down][y_up][x_down];
						n3=(int)pixel2[z_down][y_up][x_up];
						n4=(int)pixel2[z_up][y_down][x_down];
						n5=(int)pixel2[z_up][y_down][x_up];
						n6=(int)pixel2[z_up][y_up][x_down];
						n7=(int)pixel2[z_up][y_up][x_up];
					}
				}
			}
