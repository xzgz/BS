// Copyright (C) 2016 The Regents of the University of California
//
// Created by David W. Shattuck, Ph.D.
//
// This file is part of BrainSuite16a1.
//
// BrainSuite16a1 is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; version 2.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
// USA.
//

#include <vol3d.h>
#include <glcompatibility.h>
#include "glslicerender.h"
#include "glglyphs.h"
#include <surface.h>
#include <tnt/tnt_array2d.h>

#define X .525731112119133606f
#define Z .850650808352039932f

void subdivide(SILT::Surface &dfs, SILT::Surface &dfs0)
{
  const size_t nt0 = dfs0.nt();
  const size_t nv0 = dfs0.nv();
  size_t  NTnew = 4 * nt0;
  size_t NVnew = 2 + 2 * nt0;

  dfs.triangles.resize(NTnew);
  dfs.vertices.resize(NVnew);

  TNT::Array2D<int> submap((int)nv0,(int)nv0);
  for (size_t i=0;i<nv0;i++)
    for (size_t j=0;j<nv0;j++)
      submap[(int)i][(int)j] = -1;

  int count = (int)nv0;
  DSPoint *v = &dfs.vertices[0];
  for (size_t i=0;i<nv0;i++)
    v[i] = dfs0.vertices[i];
  int tcount = 0;
  Triangle *origTri = &dfs0.triangles[0];
  for (size_t i=0;i<nt0;i++)
  {
    int a = origTri[i].a;
    int b = origTri[i].b;
    int c = origTri[i].c;
    if (submap[a][b]<0)
    {
      submap[a][b] = count;
      submap[b][a] = count;
      v[count++] =  (v[a] + v[b])/2.0f;
    }
    if (submap[a][c]<0)
    {
      submap[a][c] = count;
      submap[c][a] = count;
      v[count++] =  (v[a] + v[c])/2.0f;
    }
    if (submap[b][c]<0)
    {
      submap[b][c] = count;
      submap[c][b] = count;
      v[count++] =  (v[b] + v[c])/2.0f;
    }
    int ab = submap[a][b];
    int bc = submap[b][c];
    int ac = submap[a][c];

    dfs.triangles[tcount++] = Triangle(a,ab,ac);
    dfs.triangles[tcount++] = Triangle(ab,b,bc);
    dfs.triangles[tcount++] = Triangle(c,ac,bc);
    dfs.triangles[tcount++] = Triangle(ab,bc,ac);
  }
  ///	dfs.triangles.shorten(tcount);
  dfs.triangles.resize(tcount);
}

GLEllipse::GLEllipse(int n)
{
  if (n==0)
  {
    int nTris = 12;
    int nVerts = 8;
    static GLfloat vdata[8][3] = {
      {-1, -1, -1 }, { 1, -1,  -1 }, { 1,  1, -1 }, {-1,  1,  -1 },
      {-1, -1,  1 }, { 1, -1,   1 }, { 1,  1,  1 }, {-1,  1,   1 },
    };
    static GLuint tindices[12][3] = {
      {0,1,2},{2,0,3},{4,6,5},{6,4,7},
      {1,5,6},{1,6,2},{0,3,7},{0,7,4},
      {3,2,6},{3,6,7},{1,0,5},{5,0,4},
    };
    t.resize(nTris);
    for (int i=0;i<nTris;i++)
    {
      t[i] = Triangle(tindices[i][0],tindices[i][2],tindices[i][1]);
    }
    v.resize(nVerts);
    for (int i=0;i<nVerts;i++)
    {
      v[i] = DSPoint(vdata[i][0],vdata[i][1],vdata[i][2]);
    }
  }
  else if (n==1)
  {
    int nTris = 20;
    int nVerts = 12;
    static GLfloat vdata[12][3] = {
      {-X, 0.0, Z}, {X, 0.0, Z}, {-X, 0.0, -Z}, {X, 0.0, -Z},
      {0.0, Z, X}, {0.0, Z, -X}, {0.0, -Z, X}, {0.0, -Z, -X},
      {Z, X, 0.0}, {-Z, X, 0.0}, {Z, -X, 0.0}, {-Z, -X, 0.0}
    };
    static GLuint tindices[20][3] = {
      {1,4,0}, {4,9,0}, {4,5,9}, {8,5,4}, {1,8,4},
      {1,10,8}, {10,3,8}, {8,3,5}, {3,2,5}, {3,7,2},
      {3,10,7}, {10,6,7}, {6,11,7}, {6,0,11}, {6,1,0},
      {10,1,6}, {11,0,9}, {2,11,9}, {5,2,9}, {11,2,7}
    };
    t.resize(nTris);
    for (int i=0;i<nTris;i++)
    {
      t[i] = Triangle(tindices[i][0],tindices[i][2],tindices[i][1]);
    }
    v.resize(nVerts);
    for (int i=0;i<nVerts;i++)
    {
      v[i] = DSPoint(vdata[i][0],vdata[i][1],vdata[i][2]);
    }
  }
  else if (n==2)
  {
    const int nTris = 80;
    const int nVerts = 42;
    static unsigned int tindices[80][3] = {
      {1,12,13}, {12,0,14},
      {4,13,14}, {12,14,13}, {4,14,15}, {14,0,16},
      {9,15,16}, {14,16,15}, {4,15,17}, {15,9,18},
      {5,17,18}, {15,18,17}, {8,19,20}, {19,4,17},
      {5,20,17}, {19,17,20}, {1,13,21}, {13,4,19},
      {8,21,19}, {13,19,21}, {1,21,22}, {21,8,23},
      {10,22,23}, {21,23,22}, {10,23,24}, {23,8,25},
      {3,24,25}, {23,25,24}, {8,20,25}, {20,5,26},
      {3,25,26}, {20,26,25}, {3,26,27}, {26,5,28},
      {2,27,28}, {26,28,27}, {3,27,29}, {27,2,30},
      {7,29,30}, {27,30,29}, {3,29,24}, {29,7,31},
      {10,24,31}, {29,31,24}, {10,31,32}, {31,7,33},
      {6,32,33}, {31,33,32}, {6,33,34}, {33,7,35},
      {11,34,35}, {33,35,34}, {6,34,36}, {34,11,37},
      {0,36,37}, {34,37,36}, {6,36,38}, {36,0,12},
      {1,38,12}, {36,12,38}, {10,32,22}, {32,6,38},
      {1,22,38}, {32,38,22}, {11,39,37}, {39,9,16},
      {0,37,16}, {39,16,37}, {2,40,41}, {40,9,39},
      {11,41,39}, {40,39,41}, {5,18,28}, {18,9,40},
      {2,28,40}, {18,40,28}, {11,35,41}, {35,7,30},
      {2,41,30}, {35,30,41}, };
    static float vdata[42][3] = {
      {-0.525731f,0.0f,0.850651f},
      {0.525731f,0.0f,0.850651f},
      {-0.525731f,0.0f,-0.850651f},
      {0.525731f,0.0f,-0.850651f},
      {0.0f,0.850651f,0.525731f},
      {0.0f,0.850651f,-0.525731f},
      {0.0f,-0.850651f,0.525731f},
      {0.0f,-0.850651f,-0.525731f},
      {0.850651f,0.525731f,0.0f},
      {-0.850651f,0.525731f,0.0f},
      {0.850651f,-0.525731f,0.0f},
      {-0.850651f,-0.525731f,0.0f},
      {0.0f,0.0f,1.0f},
      {0.309017f,0.5,0.809017f},
      {-0.309017f,0.5,0.809017f},
      {-0.5f,0.809017f,0.309017f},
      {-0.809017f,0.309017f,0.5f},
      {0.0f,1.0f,0.0f},
      {-0.5f,0.809017f,-0.309017f},
      {0.5f,0.809017f,0.309017f},
      {0.5f,0.809017f,-0.309017f},
      {0.809017f,0.309017f,0.5f},
      {0.809017f,-0.309017f,0.5f},
      {1,0.0f,0.0f},
      {0.809017f,-0.309017f,-0.5f},
      {0.809017f,0.309017f,-0.5f},
      {0.309017f,0.5f,-0.809017f},
      {0.0f,0.0f,-1.0f},
      {-0.309017f,0.5f,-0.809017f},
      {0.309017f,-0.5f,-0.809017f},
      {-0.309017f,-0.5f,-0.809017f},
      {0.5f,-0.809017f,-0.309017f},
      {0.5f,-0.809017f,0.309017f},
      {0.0f,-1,0.0f},
      {-0.5f,-0.809017f,0.309017f},
      {-0.5f,-0.809017f,-0.309017f},
      {-0.309017f,-0.5f,0.809017f},
      {-0.809017f,-0.309017f,0.5f},
      {0.309017f,-0.5f,0.809017f},
      {-1,0.0f,0.0f},
      {-0.809017f,0.309017f,-0.5f},
      {-0.809017f,-0.309017f,-0.5f},
    };
    t.resize(nTris);
    for (int i=0;i<nTris;i++)
    {
      t[i] = Triangle(tindices[i][0],tindices[i][1],tindices[i][2]);
    }
    v.resize(nVerts);
    for (int i=0;i<nVerts;i++)
    {
      v[i] = DSPoint(vdata[i][0],vdata[i][1],vdata[i][2]);
    }
  }
  else
  {
    const int nTris = 320;
    const int nVerts = 162;
    static unsigned int tindices[320][3] = {
      {1,42,43}, {42,12,44},
      {13,43,44}, {42,44,43}, {12,45,46}, {45,0,47},
      {14,46,47}, {45,47,46}, {4,48,49}, {48,13,50},
      {14,49,50}, {48,50,49}, {12,46,44}, {46,14,50},
      {13,44,50}, {46,50,44}, {4,49,51}, {49,14,52},
      {15,51,52}, {49,52,51}, {14,47,53}, {47,0,54},
      {16,53,54}, {47,54,53}, {9,55,56}, {55,15,57},
      {16,56,57}, {55,57,56}, {14,53,52}, {53,16,57},
      {15,52,57}, {53,57,52}, {4,51,58}, {51,15,59},
      {17,58,59}, {51,59,58}, {15,55,60}, {55,9,61},
      {18,60,61}, {55,61,60}, {5,62,63}, {62,17,64},
      {18,63,64}, {62,64,63}, {15,60,59}, {60,18,64},
      {17,59,64}, {60,64,59}, {8,65,66}, {65,19,67},
      {20,66,67}, {65,67,66}, {19,68,69}, {68,4,58},
      {17,69,58}, {68,58,69}, {5,70,62}, {70,20,71},
      {17,62,71}, {70,71,62}, {19,69,67}, {69,17,71},
      {20,67,71}, {69,71,67}, {1,43,72}, {43,13,73},
      {21,72,73}, {43,73,72}, {13,48,74}, {48,4,68},
      {19,74,68}, {48,68,74}, {8,75,65}, {75,21,76},
      {19,65,76}, {75,76,65}, {13,74,73}, {74,19,76},
      {21,73,76}, {74,76,73}, {1,72,77}, {72,21,78},
      {22,77,78}, {72,78,77}, {21,75,79}, {75,8,80},
      {23,79,80}, {75,80,79}, {10,81,82}, {81,22,83},
      {23,82,83}, {81,83,82}, {21,79,78}, {79,23,83},
      {22,78,83}, {79,83,78}, {10,82,84}, {82,23,85},
      {24,84,85}, {82,85,84}, {23,80,86}, {80,8,87},
      {25,86,87}, {80,87,86}, {3,88,89}, {88,24,90},
      {25,89,90}, {88,90,89}, {23,86,85}, {86,25,90},
      {24,85,90}, {86,90,85}, {8,66,87}, {66,20,91},
      {25,87,91}, {66,91,87}, {20,70,92}, {70,5,93},
      {26,92,93}, {70,93,92}, {3,89,94}, {89,25,95},
      {26,94,95}, {89,95,94}, {20,92,91}, {92,26,95},
      {25,91,95}, {92,95,91}, {3,94,96}, {94,26,97},
      {27,96,97}, {94,97,96}, {26,93,98}, {93,5,99},
      {28,98,99}, {93,99,98}, {2,100,101}, {100,27,102},
      {28,101,102}, {100,102,101}, {26,98,97}, {98,28,102},
      {27,97,102}, {98,102,97}, {3,96,103}, {96,27,104},
      {29,103,104}, {96,104,103}, {27,100,105}, {100,2,106},
      {30,105,106}, {100,106,105}, {7,107,108}, {107,29,109},
      {30,108,109}, {107,109,108}, {27,105,104}, {105,30,109},
      {29,104,109}, {105,109,104}, {3,103,88}, {103,29,110},
      {24,88,110}, {103,110,88}, {29,107,111}, {107,7,112},
      {31,111,112}, {107,112,111}, {10,84,113}, {84,24,114},
      {31,113,114}, {84,114,113}, {29,111,110}, {111,31,114},
      {24,110,114}, {111,114,110}, {10,113,115}, {113,31,116},
      {32,115,116}, {113,116,115}, {31,112,117}, {112,7,118},
      {33,117,118}, {112,118,117}, {6,119,120}, {119,32,121},
      {33,120,121}, {119,121,120}, {31,117,116}, {117,33,121},
      {32,116,121}, {117,121,116}, {6,120,122}, {120,33,123},
      {34,122,123}, {120,123,122}, {33,118,124}, {118,7,125},
      {35,124,125}, {118,125,124}, {11,126,127}, {126,34,128},
      {35,127,128}, {126,128,127}, {33,124,123}, {124,35,128},
      {34,123,128}, {124,128,123}, {6,122,129}, {122,34,130},
      {36,129,130}, {122,130,129}, {34,126,131}, {126,11,132},
      {37,131,132}, {126,132,131}, {0,133,134}, {133,36,135},
      {37,134,135}, {133,135,134}, {34,131,130}, {131,37,135},
      {36,130,135}, {131,135,130}, {6,129,136}, {129,36,137},
      {38,136,137}, {129,137,136}, {36,133,138}, {133,0,45},
      {12,138,45}, {133,45,138}, {1,139,42}, {139,38,140},
      {12,42,140}, {139,140,42}, {36,138,137}, {138,12,140},
      {38,137,140}, {138,140,137}, {10,115,81}, {115,32,141},
      {22,81,141}, {115,141,81}, {32,119,142}, {119,6,136},
      {38,142,136}, {119,136,142}, {1,77,139}, {77,22,143},
      {38,139,143}, {77,143,139}, {32,142,141}, {142,38,143},
      {22,141,143}, {142,143,141}, {11,144,132}, {144,39,145},
      {37,132,145}, {144,145,132}, {39,146,147}, {146,9,56},
      {16,147,56}, {146,56,147}, {0,134,54}, {134,37,148},
      {16,54,148}, {134,148,54}, {39,147,145}, {147,16,148},
      {37,145,148}, {147,148,145}, {2,149,150}, {149,40,151},
      {41,150,151}, {149,151,150}, {40,152,153}, {152,9,146},
      {39,153,146}, {152,146,153}, {11,154,144}, {154,41,155},
      {39,144,155}, {154,155,144}, {40,153,151}, {153,39,155},
      {41,151,155}, {153,155,151}, {5,63,99}, {63,18,156},
      {28,99,156}, {63,156,99}, {18,61,157}, {61,9,152},
      {40,157,152}, {61,152,157}, {2,101,149}, {101,28,158},
      {40,149,158}, {101,158,149}, {18,157,156}, {157,40,158},
      {28,156,158}, {157,158,156}, {11,127,154}, {127,35,159},
      {41,154,159}, {127,159,154}, {35,125,160}, {125,7,108},
      {30,160,108}, {125,108,160}, {2,150,106}, {150,41,161},
      {30,106,161}, {150,161,106}, {35,160,159}, {160,30,161},
      {41,159,161}, {160,161,159}, };
    static float vdata[162][3] = {
      {-0.525731f,0.0f,0.850651f},
      {0.525731f,0.0f,0.850651f},
      {-0.525731f,0.0f,-0.850651f},
      {0.525731f,0.0f,-0.850651f},
      {0.0f,0.850651f,0.525731f},
      {0.0f,0.850651f,-0.525731f},
      {0.0f,-0.850651f,0.525731f},
      {0.0f,-0.850651f,-0.525731f},
      {0.850651f,0.525731f,0.0f},
      {-0.850651f,0.525731f,0.0f},
      {0.850651f,-0.525731f,0.0f},
      {-0.850651f,-0.525731f,0.0f},
      {0.0f,0.0f,1.0f},
      {0.309017f,0.5f,0.809017f},
      {-0.309017f,0.5f,0.809017f},
      {-0.5f,0.809017f,0.309017f},
      {-0.809017f,0.309017f,0.5f},
      {0.0f,1.0f,0.0f},
      {-0.5f,0.809017f,-0.309017f},
      {0.5f,0.809017f,0.309017f},
      {0.5f,0.809017f,-0.309017f},
      {0.809017f,0.309017f,0.5f},
      {0.809017f,-0.309017f,0.5f},
      {1.0f,0.0f,0.0f},
      {0.809017f,-0.309017f,-0.5f},
      {0.809017f,0.309017f,-0.5f},
      {0.309017f,0.5f,-0.809017f},
      {0.0f,0.0f,-1.0f},
      {-0.309017f,0.5f,-0.809017f},
      {0.309017f,-0.5f,-0.809017f},
      {-0.309017f,-0.5f,-0.809017f},
      {0.5f,-0.809017f,-0.309017f},
      {0.5f,-0.809017f,0.309017f},
      {0.0f,-1.0f,0.0f},
      {-0.5f,-0.809017f,0.309017f},
      {-0.5f,-0.809017f,-0.309017f},
      {-0.309017f,-0.5f,0.809017f},
      {-0.809017f,-0.309017f,0.5f},
      {0.309017f,-0.5f,0.809017f},
      {-1.0f,0.0f,0.0f},
      {-0.809017f,0.309017f,-0.5f},
      {-0.809017f,-0.309017f,-0.5f},
      {0.273267f,0.0f,0.961938f},
      {0.433889f,0.259892f,0.862668f},
      {0.16246f,0.262866f,0.951057f},
      {-0.273267f,0.0f,0.961938f},
      {-0.16246f,0.262866f,0.951057f},
      {-0.433889f,0.259892f,0.862668f},
      {0.160622f,0.702046f,0.69378f},
      {-0.160622f,0.702046f,0.69378f},
      {0.0f,0.525731f,0.850651f},
      {-0.259892f,0.862668f,0.433889f},
      {-0.425325f,0.688191f,0.587785f},
      {-0.587785f,0.425325f,0.688191f},
      {-0.69378f,0.160622f,0.702046f},
      {-0.702046f,0.69378f,0.160622f},
      {-0.862668f,0.433889f,0.259892f},
      {-0.688191f,0.587785f,0.425325f},
      {0.0f,0.961938f,0.273267f},
      {-0.262866f,0.951057f,0.16246f},
      {-0.525731f,0.850651f,0.0f},
      {-0.702046f,0.69378f,-0.160622f},
      {0.0f,0.961938f,-0.273267f},
      {-0.259892f,0.862668f,-0.433889f},
      {-0.262866f,0.951057f,-0.16246f},
      {0.702046f,0.69378f,0.160622f},
      {0.702046f,0.69378f,-0.160622f},
      {0.525731f,0.850651f,0.0f},
      {0.259892f,0.862668f,0.433889f},
      {0.262866f,0.951057f,0.16246f},
      {0.259892f,0.862668f,-0.433889f},
      {0.262866f,0.951057f,-0.16246f},
      {0.69378f,0.160622f,0.702046f},
      {0.587785f,0.425325f,0.688191f},
      {0.425325f,0.688191f,0.587785f},
      {0.862668f,0.433889f,0.259892f},
      {0.688191f,0.587785f,0.425325f},
      {0.69378f,-0.160622f,0.702046f},
      {0.850651f,0.0f,0.525731f},
      {0.951057f,0.16246f,0.262866f},
      {0.961938f,0.273267f,0.0f},
      {0.862668f,-0.433889f,0.259892f},
      {0.961938f,-0.273267f,0.0f},
      {0.951057f,-0.16246f,0.262866f},
      {0.862668f,-0.433889f,-0.259892f},
      {0.951057f,-0.16246f,-0.262866f},
      {0.951057f,0.16246f,-0.262866f},
      {0.862668f,0.433889f,-0.259892f},
      {0.69378f,-0.160622f,-0.702046f},
      {0.69378f,0.160622f,-0.702046f},
      {0.850651f,0.0f,-0.525731f},
      {0.688191f,0.587785f,-0.425325f},
      {0.425325f,0.688191f,-0.587785f},
      {0.160622f,0.702046f,-0.69378f},
      {0.433889f,0.259892f,-0.862668f},
      {0.587785f,0.425325f,-0.688191f},
      {0.273267f,0.0f,-0.961938f},
      {0.16246f,0.262866f,-0.951057f},
      {0.0f,0.525731f,-0.850651f},
      {-0.160622f,0.702046f,-0.69378f},
      {-0.273267f,0.0f,-0.961938f},
      {-0.433889f,0.259892f,-0.862668f},
      {-0.16246f,0.262866f,-0.951057f},
      {0.433889f,-0.259892f,-0.862668f},
      {0.16246f,-0.262866f,-0.951057f},
      {-0.16246f,-0.262866f,-0.951057f},
      {-0.433889f,-0.259892f,-0.862668f},
      {0.160622f,-0.702046f,-0.69378f},
      {-0.160622f,-0.702046f,-0.69378f},
      {0.0f,-0.525731f,-0.850651f},
      {0.587785f,-0.425325f,-0.688191f},
      {0.425325f,-0.688191f,-0.587785f},
      {0.259892f,-0.862668f,-0.433889f},
      {0.702046f,-0.69378f,-0.160622f},
      {0.688191f,-0.587785f,-0.425325f},
      {0.702046f,-0.69378f,0.160622f},
      {0.525731f,-0.850651f,0.0f},
      {0.262866f,-0.951057f,-0.16246f},
      {0.0f,-0.961938f,-0.273267f},
      {0.259892f,-0.862668f,0.433889f},
      {0.0f,-0.961938f,0.273267f},
      {0.262866f,-0.951057f,0.16246f},
      {-0.259892f,-0.862668f,0.433889f},
      {-0.262866f,-0.951057f,0.16246f},
      {-0.262866f,-0.951057f,-0.16246f},
      {-0.259892f,-0.862668f,-0.433889f},
      {-0.702046f,-0.69378f,0.160622f},
      {-0.702046f,-0.69378f,-0.160622f},
      {-0.525731f,-0.850651f,0.0f},
      {-0.160622f,-0.702046f,0.69378f},
      {-0.425325f,-0.688191f,0.587785f},
      {-0.688191f,-0.587785f,0.425325f},
      {-0.862668f,-0.433889f,0.259892f},
      {-0.433889f,-0.259892f,0.862668f},
      {-0.69378f,-0.160622f,0.702046f},
      {-0.587785f,-0.425325f,0.688191f},
      {0.160622f,-0.702046f,0.69378f},
      {0.0f,-0.525731f,0.850651f},
      {-0.16246f,-0.262866f,0.951057f},
      {0.433889f,-0.259892f,0.862668f},
      {0.16246f,-0.262866f,0.951057f},
      {0.688191f,-0.587785f,0.425325f},
      {0.425325f,-0.688191f,0.587785f},
      {0.587785f,-0.425325f,0.688191f},
      {-0.961938f,-0.273267f,0.0f},
      {-0.951057f,-0.16246f,0.262866f},
      {-0.961938f,0.273267f,0.0f},
      {-0.951057f,0.16246f,0.262866f},
      {-0.850651f,0.0f,0.525731f},
      {-0.69378f,0.160622f,-0.702046f},
      {-0.69378f,-0.160622f,-0.702046f},
      {-0.850651f,0.0f,-0.525731f},
      {-0.862668f,0.433889f,-0.259892f},
      {-0.951057f,0.16246f,-0.262866f},
      {-0.862668f,-0.433889f,-0.259892f},
      {-0.951057f,-0.16246f,-0.262866f},
      {-0.425325f,0.688191f,-0.587785f},
      {-0.688191f,0.587785f,-0.425325f},
      {-0.587785f,0.425325f,-0.688191f},
      {-0.688191f,-0.587785f,-0.425325f},
      {-0.425325f,-0.688191f,-0.587785f},
      {-0.587785f,-0.425325f,-0.688191f},
    };
    t.resize(nTris);
    for (int i=0;i<nTris;i++)
    {
      t[i] = Triangle(tindices[i][0],tindices[i][1],tindices[i][2]);
    }
    v.resize(nVerts);
    for (int i=0;i<nVerts;i++)
    {
      v[i] = DSPoint(vdata[i][0],vdata[i][1],vdata[i][2]);
    }
  }
}

void GLGlyph::create(GLEllipse &shape, DSPoint center_, float r)
{
  center = center_;
  const int nv = (int)shape.v.size();
  const int nt = (int)shape.t.size();
  points.resize(nv);
  normals.resize(nv);
  triangles.resize(nt);
  for (int i=0;i<nt;i++)
    triangles[i] = shape.t[i];
  for (int i=0;i<nv;i++)
  {
    normals[i] = shape.v[i];
    points[i] = r*normals[i] + center;
  }
}

void GLGlyph::create(GLEllipse &shape, DSPoint center_, EigenSystem3x3f &eg, float r)
{
  center = center_;
  center = center_;
  const int nv = (int)shape.v.size();
  const int nt = (int)shape.t.size();
  points.resize(nv);
  normals.resize(nv);
  triangles.resize(nt);
  for (int i=0;i<nt;i++)
    triangles[i] = shape.t[i];

  const float l0 = (eg.l0*r>0.001f) ? eg.l0*r : 0.001f;
  const float l1 = (eg.l1*r>0.001f) ? eg.l1*r : 0.001f;
  const float l2 = (eg.l2*r>0.001f) ? eg.l2*r : 0.001f;
  DSPoint *vdata = &shape.v[0];
  for (int i=0;i<nv;i++)
  {
    DSPoint p0(vdata[i].x*l0,vdata[i].y*l1,vdata[i].z*l2);
    points[i] = eg.rotate(p0);
    normals[i] = eg.rotate(DSPoint(vdata[i].x,vdata[i].y,vdata[i].z));
    points[i] += center;
  }
}
